// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using DB_First_Using_EF_Core_Power_Tools.Data.Models;
using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Data;
using System.Threading;
using System.Threading.Tasks;

namespace DB_First_Using_EF_Core_Power_Tools.Data.Contexts
{
    public partial class NorthwindDbContext
    {
        private INorthwindDbContextProcedures _procedures;

        public virtual INorthwindDbContextProcedures Procedures
        {
            get
            {
                if (_procedures is null) _procedures = new NorthwindDbContextProcedures(this);
                return _procedures;
            }
            set
            {
                _procedures = value;
            }
        }

        public INorthwindDbContextProcedures GetProcedures()
        {
            return Procedures;
        }
    }

    public partial class NorthwindDbContextProcedures : INorthwindDbContextProcedures
    {
        private readonly NorthwindDbContext _context;

        public NorthwindDbContextProcedures(NorthwindDbContext context)
        {
            _context = context;
        }

        public virtual async Task<List<NewProductInsertCommandResult>> NewProductInsertCommandAsync(string productName, int? supplierID, int? categoryID, string quantityPerUnit, decimal? unitPrice, short? unitsInStock, short? unitsOnOrder, short? reorderLevel, bool? discontinued, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProductName",
                    Size = 80,
                    Value = productName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SupplierID",
                    Value = supplierID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CategoryID",
                    Value = categoryID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "QuantityPerUnit",
                    Size = 40,
                    Value = quantityPerUnit ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UnitPrice",
                    Precision = 19,
                    Scale = 4,
                    Value = unitPrice ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "UnitsInStock",
                    Value = unitsInStock ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "UnitsOnOrder",
                    Value = unitsOnOrder ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "ReorderLevel",
                    Value = reorderLevel ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "Discontinued",
                    Value = discontinued ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<NewProductInsertCommandResult>("EXEC @returnValue = [dbo].[NewProductInsertCommand] @ProductName = @ProductName, @SupplierID = @SupplierID, @CategoryID = @CategoryID, @QuantityPerUnit = @QuantityPerUnit, @UnitPrice = @UnitPrice, @UnitsInStock = @UnitsInStock, @UnitsOnOrder = @UnitsOnOrder, @ReorderLevel = @ReorderLevel, @Discontinued = @Discontinued", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<NewProductSelectCommandResult>> NewProductSelectCommandAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<NewProductSelectCommandResult>("EXEC @returnValue = [dbo].[NewProductSelectCommand]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }
    }
}
